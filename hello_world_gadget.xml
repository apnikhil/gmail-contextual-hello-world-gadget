<?xml version="1.0" encoding="UTF-8"?>
<Module>
  <ModulePrefs title="Hello World"
    description="Matches and echoes 'Hello World' string in emails"
    height="20"
    author="Sarah M and Walter Q"
    author_email="..."
    author_location="Mountain View, CA">

    <!-- Declare feature dependencies. -->

    <!-- This one is not specific to Gmail contextual gadgets. -->
    <Require feature="dynamic-height"/>

    <!-- This isolates the gadget from others on the same page because it will
         do contacts stuff. -->
    <Require feature="locked-domain"/>

    <!-- OAuth for some contacts access -->
    <OAuth>
        <Service name="google">
            <Access url="https://www.google.com/accounts/OAuthGetAccessToken"
                method="GET" /> 
            <Request
                url="https://www.google.com/accounts/OAuthGetRequestToken?scope=http://www.google.com/m8/feeds/"
                method="GET" /> 
            <Authorization
                url="https://www.google.com/accounts/OAuthAuthorizeToken?oauth_callback=http://oauth.gmodules.com/gadgets/oauthcallback"
                /> 
        </Service>
    </OAuth>

    <!-- The next feature, Caja, is optional, and is supported for
     use only within test domains. Uncomment the tag only for
     non-production gadgets. -->
    <!-- <Require feature="caja"/> -->

    <!-- The next feature, google.contentmatch, is required for all
     Gmail contextual gadgets.
     <Param> - specify one or more comma-separated extractor IDs in
     a param named "extractors". This line is overridden by the extractor ID
     in the manifest, but is still expected to be present. -->
    <Require feature="google.contentmatch">
      <Param name="extractors">
        google.com:HelloWorld,google.com:SenderEmailExtractor
      </Param>
    </Require>

  </ModulePrefs>

  <!-- Define the content type and display location. The settings
   "html" and "card" are required for all Gmail contextual gadgets. -->
  <Content type="html" view="card">
    <![CDATA[
        <script type='text/javascript'
            src='http://www.google.com/jsapi'></script>
        <script type='text/javascript'
            src='http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js'></script>
        <script type='text/javascript'
            src='http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.4/jquery-ui.min.js'></script>
        <!-- shindig oauth popup handling code --> 
        <script src="http://github.com/tgevaert/gmail-contextual-hello-world-gadget/raw/master/popup.js"></script> 

        <style>
        #main {
            margin: 0px;
            padding: 0px;
            font-size: small;
        }
        </style>

        <!-- <div id="main" style="display: none">
        </div>

        <div id="approval" style="display: none">
            <img src="http://gadget-doc-examples.googlecode.com/svn/trunk/images/new.gif">
            <a href="#" id="personalize">Personalize this gadget</a>
        </div>

        <div id="waiting" style="display: none">
            Please click
            <a href="#" id="approvaldone">I've approved access</a>
            once you've approved access to your data.
        </div> -->




        <script type="text/javascript">

        var contacts = null; // make service object global
        var feedUri = 'http://www.google.com/m8/feeds/contacts/default/full';

        // Display UI depending on OAuth access state of the gadget (see <divs> above).
        // If user hasn't approved access to data, provide a "Personalize this gadget" link
        // that contains the oauthApprovalUrl returned from makeRequest.
        //
        // If the user has opened the popup window but hasn't yet approved access, display
        // text prompting the user to confirm that s/he approved access to data.  The user
        // may not ever need to click this link, if the gadget is able to automatically
        // detect when the user has approved access, but showing the link gives users
        // an option to fetch their data even if the automatic detection fails.
        //
        // When the user confirms access, the fetchData() function is invoked again to
        // obtain and display the user's data.
        function showOneSection(toshow) {
          var sections = [ 'main', 'approval', 'waiting' ];
          for (var i=0; i < sections.length; ++i) {
            var s = sections[i];
            var el = document.getElementById(s);
            if (s === toshow) {
              el.style.display = "block";
            } else {
              el.style.display = "none";
            }
          }
        }

        // Process returned JSON feed to display data.
        function showResults(result) {
          //showOneSection('main');
          jQuery('body').html(result.feed.title.$t);
          jQuery('body').append('<div id="accordion"></div>');
          resultList = result.feed.entry;
          for(var i = 0; i < resultList.length; i++) {
              entry = resultList[i];
              jQuery('div#accordion').append('<h3><a href="#">' + entry.title.$t +  '</a></h3>');
              jQuery('div#accordion').append('<div><p>' + entry.gd$email[0].address + '</p></div>');
          }
          $(function() {
                $('div#accordion').accordion();
                });


          //var titleElement = document.createElement('div');
          //var nameNode = document.createTextNode(result.feed.title.$t);
          //titleElement.appendChild(nameNode);
          //jQuery('body').append(titleElement);
          //jQuery('body').append(document.createElement("br"));

          //list = result.feed.entry;

          //for(var i = 0; i < list.length; i++) {
          //  entry = list[i];
          //  var divElement = document.createElement('div');
          //  divElement.setAttribute('class', 'name');
          //  divElement.appendChild(nameNode);
          //  if (entry.gd$email) {
          //    var valueNode = document.createTextNode(entry.gd$email[0].address);
          //    divElement.appendChild(valueNode);
          //  }
          //  jQuery('body').append(divElement);
          //}
        }

        // Extract contact id url
        function extractContactID(results, address) {
            for (var result in results){
                if (results[result].gd$email[0].address == address)
                    return results[result].id.$t;
                }
            return null;
        }

        // Extract contact id url
        function extractGDataContactID(entries, address) {
            for (var entry in entries){
                entry_addresses = entries[entry].getEmailAddresses();
                for (var entry_address in entry_addresses){
                    if (entry_addresses[entry_address] == address)
                        return entries[entry].getId();
                    }
                }
            return null;
        }


        <!-- Start by fetching the array of content matches. -->
        matches = google.contentmatch.getContentMatches();
        var matchList = document.createElement('UL');
        var senderAddress;
        for (var match in matches) {
            if (matches[match].sender_email)
                senderAddress = matches[match].sender_email;
        }

        var listItem;
        var extractedText;

        // Extract contact Name & Groups
        function printNameAndGroups (contact) {
            var params = {};
            params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;
            params[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.OAUTH;
            params[gadgets.io.RequestParameters.OAUTH_SERVICE_NAME] = "google";
            params[gadgets.io.RequestParameters.OATH_USE_TOKEN] = "always";
            params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.GET;
            jQuery('body').html('<h3>'+contact.title.$t+' is a member of the groups:</h3></br>');
            for (var group in contact.gContact$groupMembershipInfo){
                if (contact.gContact$groupMembershipInfo[group].deleted == "false")
                    gadgets.io.makeRequest(contact.gContact$groupMembershipInfo[group].href+'?alt=json',
                                           function (response) {
                                           jQuery('body').append('<p>'+response.data.entry.title.$t+'</p>');
                                           }, params);
            }
        }


        function initGadget() {
            google.load('gdata', '1.x', {packages: ['contacts']});
            google.setOnLoadCallback(function() {
                contacts = new google.gdata.contacts.ContactsService('yocto-ContactsGadget-0.01');
                contacts.useOAuth('google');
                fetchGData();
        }

        function fetchGData() {
            var callback = function(result) {
                if (response.oauthApprovalUrl) {
                    // Create the popup handler. The onOpen function is called when the user 
                    // opens the popup window. The onClose function is called when the popup 
                    // window is closed. 
                    var popup = shindig.oauth.popup({ 
                        destination: response.oauthApprovalUrl, 
                        windowOptions: null, 
                        onOpen: function() {showOneSection('waiting'); }, 
                        onClose: function() { fetchData(); } 
                    }); 
                    // Use the popup handler to attach onclick handlers to UI elements. The 
                    // createOpenerOnClick() function returns an onclick handler to open the 
                    // popup window. The createApprovedOnClick function returns an onclick 
                    // handler that will close the popup window and attempt to fetch the user's 
                    // data again. 
                    var personalize = document.getElementById('personalize'); 
                    personalize.onclick = popup.createOpenerOnClick(); 
                    var approvaldone = document.getElementById('approvaldone'); 
                    approvaldone.onclick = popup.createApprovedOnClick(); 
                    showOneSection('approval'); 
                } else if (response.feed) {
                    emailSender = extractGDataContactID(response.feed.entry, senderAddress);
                    if (emailSender == null) {
                        jQuery('body').html('This contact is not in your contact list. Add it?');
                    } else {
                        jQuery('body').html('Cool, bro');
                    }

                } else {
                }
            }
            
                    
            
        }


        function fetchData() {
            var params = {};
            url = "http://www.google.com/m8/feeds/contacts/default/base?alt=json";
            params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;
            params[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.OAUTH;
            params[gadgets.io.RequestParameters.OAUTH_SERVICE_NAME] = "google";
            params[gadgets.io.RequestParameters.OATH_USE_TOKEN] = "always";
            params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.GET;

            gadgets.io.makeRequest(url, function (response) {
                if (response.oauthApprovalUrl) {
                    // Create the popup handler. The onOpen function is called when the user 
                    // opens the popup window. The onClose function is called when the popup 
                    // window is closed. 
                    var popup = shindig.oauth.popup({ 
                        destination: response.oauthApprovalUrl, 
                        windowOptions: null, 
                        onOpen: function() {showOneSection('waiting'); }, 
                        onClose: function() { fetchData(); } 
                    }); 
                    // Use the popup handler to attach onclick handlers to UI elements. The 
                    // createOpenerOnClick() function returns an onclick handler to open the 
                    // popup window. The createApprovedOnClick function returns an onclick 
                    // handler that will close the popup window and attempt to fetch the user's 
                    // data again. 
                    var personalize = document.getElementById('personalize'); 
                    personalize.onclick = popup.createOpenerOnClick(); 
                    var approvaldone = document.getElementById('approvaldone'); 
                    approvaldone.onclick = popup.createApprovedOnClick(); 
                    showOneSection('approval'); 
                } else if (response.data) {
                    //showResults(response.data);
                    emailSender = extractContactID(response.data.feed.entry, senderAddress);
                    if (emailSender == null) {
                        jQuery('body').html('This contact is not in your contact list. Add it?');
                    } else {
                        gadgets.io.makeRequest(emailSender.replace('/base/','/full/')+'?alt=json', function (response) {
                            printNameAndGroups(response.data.entry);
                        }, params);
                    }
                } else {
                    jQuery('body').html('ERROR' + response.oauthError + ': ' + response.oauthErrorText);
                }
                }, params);
        }
        gadgets.util.registerOnLoadHandler(initGadget);


                    


        //<!-- Iterate through the array and display output for each match. -->
        //for (var match in matches) {
        //  for (var key in matches[match]) {
        //    listItem = document.createElement('LI');
        //    extractedText = document.createTextNode(key + ": " + matches[match][key]);
        //    listItem.appendChild(extractedText);
        //    matchList.appendChild(listItem);
        //  }
        //}
        //jQuery('body').html('jQuery, Dog');
        //document.body.appendChild(matchList);
        gadgets.window.adjustHeight(200);
      </script>
    ]]>
  </Content>
</Module>

