<?xml version="1.0" encoding="UTF-8"?>
<Module>
  <ModulePrefs title="Hello World"
    description="Matches and echoes 'Hello World' string in emails"
    height="20"
    author="Sarah M and Walter Q"
    author_email="..."
    author_location="Mountain View, CA">

    <!-- Declare feature dependencies. -->

    <!-- This one is not specific to Gmail contextual gadgets. -->
    <Require feature="dynamic-height"/>

    <!-- This isolates the gadget from others on the same page because it will
         do contacts stuff. -->
    <Require feature="locked-domain"/>

    <!-- OAuth for some contacts access -->
    <OAuth>
        <Service name="google">
            <Access url="https://www.google.com/accounts/OAuthGetAccessToken"
                method="GET" /> 
            <Request
                url="https://www.google.com/accounts/OAuthGetRequestToken?scope=http://www.google.com/m8/feeds/"
                method="GET" /> 
            <Authorization
                url="https://www.google.com/accounts/OAuthAuthorizeToken?oauth_callback=http://oauth.gmodules.com/gadgets/oauthcallback"
                /> 
        </Service>
    </OAuth>

    <!-- The next feature, Caja, is optional, and is supported for
     use only within test domains. Uncomment the tag only for
     non-production gadgets. -->
    <!-- <Require feature="caja"/> -->

    <!-- The next feature, google.contentmatch, is required for all
     Gmail contextual gadgets.
     <Param> - specify one or more comma-separated extractor IDs in
     a param named "extractors". This line is overridden by the extractor ID
     in the manifest, but is still expected to be present. -->
    <Require feature="google.contentmatch">
      <Param name="extractors">
        google.com:HelloWorld
      </Param>
    </Require>

  </ModulePrefs>

  <!-- Define the content type and display location. The settings
   "html" and "card" are required for all Gmail contextual gadgets. -->
  <Content type="html" view="card">
    <![CDATA[
        <script type='text/javascript'
            src='http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js'></script>
        <!-- shindig oauth popup handling code --> 
        <script src="http://gadget-doc-examples.googlecode.com/svn/trunk/opensocial-gadgets/popup.js"></script> 
        <script type="text/javascript">

        <!-- Start by fetching the array of content matches. -->
        matches = google.contentmatch.getContentMatches();
        var matchList = document.createElement('UL');
        var listItem;
        var extractedText;

        function fetchData() {
            var params = {};
            url = "http://www.google.com/m8/feeds/contacts/default/base?alt=json";
            params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.JSON;
            params[gadgets.io.RequestParameters.AUTHORIZATION] = gadgets.io.AuthorizationType.OAUTH;
            params[gadgets.io.RequestParameters.OAUTH_SERVICE_NAME] = "google";
            params[gadgets.io.RequestParameters.OATH_USE_TOKEN] = "always";
            params[gadgets.io.RequestParameters.METHOD] = gadgets.io.MethodType.GET;

            gadgets.io.makeRequest(url, function (response) {
                if (response.oauthApprovalUrl) {
                // Create the popup handler. The onOpen function is called when the user 
                // opens the popup window. The onClose function is called when the popup 
                // window is closed. 
                var popup = shindig.oauth.popup({ 
                    destination: response.oauthApprovalUrl, 
                    windowOptions: null, 
                    onOpen: function() {showOneSection('waiting'); }, 
                    onClose: function() { fetchData(); } 
                }); 
                // Use the popup handler to attach onclick handlers to UI elements. The 
                // createOpenerOnClick() function returns an onclick handler to open the 
                // popup window. The createApprovedOnClick function returns an onclick 
                // handler that will close the popup window and attempt to fetch the user's 
                // data again. 
                var personalize = document.getElementById('personalize'); 
                personalize.onclick = popup.createOpenerOnClick(); 
                var approvaldone = document.getElementById('approvaldone'); 
                approvaldone.onclick = popup.createApprovedOnClick(); 
                //showOneSection('approval'); 
                        jQuery('body').html('Authenticate!');
                    } else if (response.data) {
                        jQuery('body').html('Cool. Got data');
                    } else {
                        jQuery('body').html('ERROR' + response.oauthError + ': ' + response.oauthErrorText);
                    }
                }, params);
        }
        gadgets.util.registerOnLoadHandler(fetchData);



                    


        <!-- Iterate through the array and display output for each match. -->
        for (var match in matches) {
          for (var key in matches[match]) {
            listItem = document.createElement('LI');
            extractedText = document.createTextNode(key + ": " + matches[match][key]);
            listItem.appendChild(extractedText);
            matchList.appendChild(listItem);
          }
        }
        jQuery('body').html('jQuery, Dog');
        document.body.appendChild(matchList);
        gadgets.window.adjustHeight(200);
      </script>
    ]]>
  </Content>
</Module>

